/*import Database from "better-sqlite3";
import { Kysely, SqliteDialect } from "kysely";

// –°–æ–∑–¥–∞–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º better-sqlite3
export const db = new Kysely({
    dialect: new SqliteDialect({
        database: new Database(process.env.DATABASE_URL || "./database.sqlite"), // –ò—Å–ø–æ–ª—å–∑—É–µ–º better-sqlite3
    }),
});
*/
import { db } from "./src/models/db"; // –ü–æ–¥–∫–ª—é—á–∞–µ–º –µ–¥–∏–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
async function populateDatabase() {
    try {
        // –ó–∞–ø–æ–ª–Ω—è–µ–º —Ç–∞–±–ª–∏—Ü—É templates —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ —Ç–µ–∫—Å—Ç–∞
        await db
            .insertInto("templates")
            .values([
                {
                    text: "Congratulations {username}üí™ on completing {sprintCode}!",
                },
                {
                    text: "Well done {username}üí™üí™üí™, you've finished {sprintCode}!",
                },
                {
                    text: "Awesome job, {username}üí™! {sprintCode} is completed!",
                },
                {
                    text: "You did it! I knew you could. ü§ó, {username}! You've completed {sprintCode}.",
                },
            ])
            .execute();

        // –ó–∞–ø–æ–ª–Ω—è–µ–º —Ç–∞–±–ª–∏—Ü—É sprints —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ —Å–ø—Ä–∏–Ω—Ç–∞–º–∏
        await db
            .insertInto("sprints")
            .values([
                { code: "Sprint-1", title: "Node.js and Relational Databases" },
                {
                    code: "Sprint-2",
                    title: "REST APIs & Test Driven Development",
                },
                { code: "Sprint-3", title: "Advanced JavaScript & TypeScript" },
                {
                    code: "Sprint-4",
                    title: "Building Scalable Apps with Node.js",
                },
                { code: "Sprint-5", title: "GraphQL and Data Management" },
            ])
            .execute();

        console.log("Database populated successfully!");
    } catch (error) {
        console.error("Error populating the database:", error);
    }
}

// –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
populateDatabase();
